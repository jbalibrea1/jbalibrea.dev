<div
  id="themeToggle"
  aria-label="Toggle dark mode"
  title="Toggle dark mode"
  class="flex items-center justify-center w-10 h-10 rounded-md transition-colors hover:bg-slate-950/10 text-textColor/80"
>
  <svg
    class="theme_toggle_svg"
    width="1.2em"
    height="1.2em"
    viewBox="0 0 24 24"
    fill="none"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
    stroke="currentColor"
  >
    <mask id="myMask">
      <rect x="0" y="0" width="100%" height="100%" fill="white"></rect>
      <circle class="theme_toggle_circle1" fill="black" cx="100%" cy="0%"
      ></circle>
    </mask>
    <circle
      class="theme_toggle_circle2 fill-textColor/80"
      cx="12"
      cy="12"
      mask="url(#myMask)"></circle>
    <g class="theme_toggle_g" stroke="currentColor" opacity="1">
      <line x1="12" y1="1" x2="12" y2="3"></line>
      <line x1="12" y1="21" x2="12" y2="23"></line>
      <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
      <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
      <line x1="1" y1="12" x2="3" y2="12"></line>
      <line x1="21" y1="12" x2="23" y2="12"></line>
      <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
      <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
    </g>
  </svg>
</div>

<style>
  #themeToggle {
    border: 0;
    cursor: pointer;
  }
  .theme_toggle_circle1 {
    transition:
      cx 0.5s,
      cy 0.5s;
    cx: 50%;
    cy: 23%;
  }
  .theme_toggle_circle2 {
    transition: r 0.3s;
  }
  .theme_toggle_svg {
    transition: transform 0.5s cubic-bezier(0.68, -0.55, 0.27, 1.55);
    transform: rotate(40deg);
  }
  .theme_toggle_g {
    transition: opacity 0.5s;
    opacity: 0;
  }
  :global(html.dark) #themeToggle .theme_toggle_circle1 {
    cx: 100%;
    cy: 0%;
  }
  :global(html.dark) #themeToggle .theme_toggle_svg {
    transform: rotate(90deg);
  }
  :global(html.dark) #themeToggle .theme_toggle_g {
    opacity: 1;
  }
</style>
<script is:inline>
  (function () {
    const themeCircle1 = document.querySelector('.theme_toggle_circle1');
    const themeCircle2 = document.querySelector('.theme_toggle_circle2');

    const prefersDark = window.matchMedia(
      '(prefers-color-scheme: dark)',
    ).matches;

    // Obtener el tema guardado en localStorage o usar el tema preferido
    const savedTheme = localStorage.getItem('theme');

    // Si no hay tema guardado, usar el tema preferido
    const theme = savedTheme || (prefersDark ? 'dark' : 'light');

    // Función para establecer el tema light/dark
    const setTheme = (theme) => {
      const isDark = theme === 'dark';
      document.documentElement.classList.toggle('dark', isDark);

      // reemplazar los atributos de los círculos según el tema
      if (isDark) {
        themeCircle1.setAttribute('r', '5');
        themeCircle2.setAttribute('r', '5');
      } else {
        themeCircle1.setAttribute('r', '9');
        themeCircle2.setAttribute('r', '9');
      }
      let meta = document.getElementById('theme-color');
      if (!meta) {
        meta = document.createElement('meta');
        meta.name = 'theme-color';
        meta.id = 'theme-color';
        document.head.appendChild(meta);
      }
      meta.setAttribute('content', isDark ? '#272B34' : '#fafafa');

      localStorage.setItem('theme', theme);
    };

    // Inicializar
    setTheme(theme);

    //astro:page-load event para establecer el tema cuando la página se carga
    document.addEventListener('astro:page-load', () => {
      setTheme(localStorage.getItem('theme') || 'light');

      const toggle = document.getElementById('themeToggle');
      if (toggle) {
        toggle.addEventListener('click', () => {
          const newTheme = document.documentElement.classList.contains('dark')
            ? 'light'
            : 'dark';
          setTheme(newTheme);
        });
      }
    });

    // astro:after-swap event para actualizar el tema después de un cambio de página sin recargar
    document.addEventListener('astro:after-swap', () => {
      setTheme(localStorage.getItem('theme') || 'light');
    });
  })();
</script>
