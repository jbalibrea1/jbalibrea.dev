name: CI/CD - Build, Push, Deploy üê≥
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
on:
  push:
    branches:
      - main
      - feat/*
      - chore/*
      - refactor/*

jobs:
  skip-check:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel workflow if commit contains [skip deploy]
        run: |
          if git log -1 --pretty=%B | grep -iq '\[skip deploy\]'; then
            echo "üõë Workflow cancelled by commit message."
            exit 1
          fi

  build-and-push:
    needs: skip-check
    if: needs.skip-check.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      - name: Checkout repo
        uses: actions/checkout@v4
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      - run: echo "üîê Successfully logged in to GitHub Container Registry."

      - id: build-image
        name: üê≥ Build and tag Docker image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/jbalibreadev-web
          BRANCH_NAME="${{ github.ref_name }}"

          if [[ "$BRANCH_NAME" == "main" ]]; then
            TAG="latest"
          else
            TAG="pre"
          fi

          echo "üîß Building image with tag: $TAG"

          docker build --build-arg PUBLIC_RECAPTCHA_KEY=${{ secrets.PUBLIC_RECAPTCHA_KEY }} \
            -t $IMAGE_NAME:$TAG .
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "TAG=$TAG" >> $GITHUB_OUTPUT

      - name: üöÄ Push Docker image
        run: |
          docker push ${{ steps.build-image.outputs.IMAGE_NAME }}:${{ steps.build-image.outputs.TAG }}

  deploy:
    needs: build-and-push
    if: needs.build-and-push.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: üß† Determine compose file to use
        id: branch-check
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "COMPOSE_FILE=docker-compose.yml" >> $GITHUB_OUTPUT
          else
            echo "COMPOSE_FILE=docker-compose.pre.yml" >> $GITHUB_OUTPUT
          fi

      - name: üîê Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            cd ${{ secrets.VPS_PROJECT_PATH }}
            ls -l
            echo "üîß Starting deployment on the VPS..."

            if [[ "${{ github.ref_name }}" == "main" ]]; then
              echo "üöÄ Deploying production image using docker-compose.yml"
            else
              echo "‚öôÔ∏è Deploying pre-production image using docker-compose.pre.yml"
            fi

            docker compose -f ${{ steps.branch-check.outputs.COMPOSE_FILE }} pull
            echo "üì¶ Pulled the latest Docker image from GitHub Container Registry."

            docker compose -f ${{ steps.branch-check.outputs.COMPOSE_FILE }} up -d --force-recreate
            echo "‚úÖ Deployment completed successfully on the VPS."

            export PATH="$HOME/.local/bin:$PATH"
            if command -v docker-clean > /dev/null; then
              docker-clean
            else
              echo "‚ö†Ô∏è docker-clean no est√° instalado o no est√° en PATH"
            fi
